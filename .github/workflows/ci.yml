name: CI

on: [push, pull_request]

env:
  BUILD_TYPE: Release
  LLVM_VERSION: "11.0.0"

jobs:
  build:
    strategy:
      matrix:
        config:
          - {name: "Linux", os: ubuntu-latest, cmakegen: "", llvm: "linux-gnu-ubuntu-20.04", llvm-ext: ".tar.xz", tc: "linux-ubuntu14", tc-ext: ".tar.gz", unpack: "tar xf"}
          - {name: "Windows", os: windows-latest, cmakegen: "-G \"MinGW Makefiles\"", llvm: "", llvm-ext: "", tc: "w64-mingw32", tc-ext: ".zip", unpack: "unzip"}
          - {name: "Mac", os: macOS-latest, cmakegen: "", llvm: "apple-darwin", llvm-ext: ".tar.xz", tc: "apple-darwin", tc-ext: ".tar.gz", unpack: "tar xf"}

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v2

    - name: Requirements (Linux)
      if: matrix.config.name == 'Linux'
      run: |
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-program-options-dev

    - name: Requirements (Windows)
      if: matrix.config.name == 'Windows'
      shell: bash
      run: |
        choco install boost-msvc-14.1 --version=1.67.0
        choco install wget unzip
        choco install llvm --version=$LLVM_VERSION

    - name: Requirements (Mac)
      if: matrix.config.name == 'Mac'
      run: |
        brew install boost coreutils

    - name: Requirements (Linux/Mac)
      if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-$LLVM_VERSION-x86_64-${{ matrix.config.llvm }}"
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_VERSION/$LLVM_NAME${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} $LLVM_NAME${{ matrix.config.llvm-ext }}
        mv $LLVM_NAME llvm-lib

    - name: Requirements
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        TC_NAME="riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-${{ matrix.config.tc }}"
        wget https://static.dev.sifive.com/dev-tools/$TC_NAME${{ matrix.config.tc-ext }}
        ${{ matrix.config.unpack }} $TC_NAME${{ matrix.config.tc-ext }}
        mv $TC_NAME riscv-tc

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        export LLVM_DIR=${{runner.workspace}}/llvm-lib
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=../install

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install

    - name: Setup tests
      working-directory: ${{runner.workspace}}/install/examples
      run: |
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv/build
        cd SW/riscv/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf
        cmake --build . --config $BUILD_TYPE
        cd -
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_cpp/build
        cd SW/riscv_cpp/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf
        cmake --build . --config $BUILD_TYPE
        cd -
        cd bare_etiss_processor
        cmake -E make_directory ${{runner.workspace}}/install/examples/bare_etiss_processor/build
        cd build
        cmake ..
        cmake --build . --config $BUILD_TYPE

    - name: Test (Linux/Mac)
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor
      if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      shell: bash
      run: |
        ./run_helper.sh ../SW/riscv/build/riscv_example
        ./run_helper.sh ../SW/riscv/build/riscv_example gcc
        ./run_helper.sh ../SW/riscv/build/riscv_example llvm
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example gcc
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example llvm
