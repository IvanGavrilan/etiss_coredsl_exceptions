name: CI

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        config:
          - {name: "Linux", os: ubuntu-latest, cmakegen: "", llvm: "linux-gnu-ubuntu-20.04", llvm-ext: ".tar.xz", tc: "linux-ubuntu14", tc-ext: ".tar.gz", unpack: "tar xf"}
          #- {name: "Windows", os: windows-latest, cmakegen: "-G \"Unix Makefiles\" -DCMAKE_MAKE_PROGRAM=make", llvm: "", llvm-ext: "", tc: "w64-mingw32", tc-ext: ".zip", unpack: "unzip"}
          #- {name: "Mac", os: macOS-latest, cmakegen: "", llvm: "apple-darwin", llvm-ext: ".tar.xz", tc: "apple-darwin", tc-ext: ".tar.gz", unpack: "tar xf"}

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v2

    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1

    - name: Requirements (Linux)
      if: matrix.config.name == 'Linux'
      run: |
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-program-options-dev

    - name: Requirements (Windows)
      if: matrix.config.name == 'Windows'
      shell: bash
      run: |
        choco install boost-msvc-14.2
        choco install wget unzip
        choco install llvm --version=11.0.0
        choco install make

    - name: Requirements (Mac)
      if: matrix.config.name == 'Mac'
      run: |
        brew install boost coreutils

    - name: Requirements (Linux/Mac)
      if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-11.0.0-x86_64-${{ matrix.config.llvm }}"
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/$LLVM_NAME${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} $LLVM_NAME${{ matrix.config.llvm-ext }}
        mv $LLVM_NAME llvm-lib

    - name: Requirements
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        TC_NAME="riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-${{ matrix.config.tc }}"
        wget https://static.dev.sifive.com/dev-tools/$TC_NAME${{ matrix.config.tc-ext }}
        ${{ matrix.config.unpack }} $TC_NAME${{ matrix.config.tc-ext }}
        mv $TC_NAME riscv-tc

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        export LLVM_DIR=${{runner.workspace}}/llvm-lib
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=../install

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install

    - name: Create Test Build Environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_dhry/build
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv/build
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv/build64
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_cpp/build
        cmake -E make_directory ${{runner.workspace}}/install/examples/SW/riscv_cpp/build64
        cmake -E make_directory ${{runner.workspace}}/install/examples/bare_etiss_processor/build

    - name: Setup tests
      working-directory: ${{runner.workspace}}/install/examples
      shell: bash
      run: |
        cd SW/riscv_dhry/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf ${{matrix.config.cmakegen}}
        cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}
        cd -
        cd SW/riscv/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf ${{matrix.config.cmakegen}}
        cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}
        cd -
        cd SW/riscv/build64
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf -DRISCV_ARCH=rv64gc -DRISCV_ABI=lp64d ${{matrix.config.cmakegen}}
        cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}
        cd -
        cd SW/riscv_cpp/build
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf ${{matrix.config.cmakegen}}
        cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}
        cd -
        cd SW/riscv_cpp/build64
        cmake .. -DRISCV_ELF_GCC_PREFIX=../../../../../riscv-tc -DRISCV_ELF_GCC_BASENAME=riscv64-unknown-elf -DRISCV_ARCH=rv64gc -DRISCV_ABI=lp64d ${{matrix.config.cmakegen}}
        cmake --build . --config $BUILD_TYPE -j ${{ steps.cpu-cores.outputs.count }}
        cd -
        cd bare_etiss_processor
        cd build
        cmake ..
        cmake --build . --config $BUILD_TYPE

    - name: Compress Compiled System
      if: matrix.config.name == 'Linux'
      run: |
        cp -r script ${{runner.workspace}}
        tar -C ${{runner.workspace}} -cvf ${{runner.workspace}}/etiss.tar install script

    - name: Upload Compiled System
      if: matrix.config.name == 'Linux'
      uses: actions/upload-artifact@v2
      with:
        name: etiss-${{matrix.config.name}}.tar
        path: ${{runner.workspace}}/etiss.tar

    - name: Test (Linux/Mac)
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor
      #if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      if: matrix.config.name == 'Linux'
      shell: bash
      run: |
        ./run_helper.sh ../SW/riscv/build/riscv_example.elf
        ./run_helper.sh ../SW/riscv/build/riscv_example.elf gcc
        ./run_helper.sh ../SW/riscv/build/riscv_example.elf llvm
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example.elf
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example.elf gcc
        ./run_helper.sh ../SW/riscv_cpp/build/riscv_example.elf llvm
        ./run_helper.sh ../SW/riscv/build64/riscv_example.elf
        ./run_helper.sh ../SW/riscv_cpp/build64/riscv_example.elf

    - name: Test (Windows)
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor/build
      if: matrix.config.name == 'Windows'
      shell: bash
      run: |
        PATH=$PATH:/d/a/etiss/install/lib/
        cd $BUILD_TYPE
        ./main.exe --vp.elf_file=../../../SW/riscv/build/riscv_example.elf --jit.type=TCCJIT --etiss.loglevel=4 -i../../../SW/riscv/memsegs.ini -pLogger
        ./main.exe --vp.elf_file=../../../SW/riscv/build/riscv_example.elf --jit.type=LLVMJIT --etiss.loglevel=4 -i../../../SW/riscv/memsegs.ini -pLogger
        ./main.exe --vp.elf_file=../../../SW/riscv_cpp/build/riscv_example.elf --jit.type=TCCJIT --etiss.loglevel=4 -i../../../SW/riscv_cpp/memsegs.ini -pLogger
        ./main.exe --vp.elf_file=../../../SW/riscv_cpp/build/riscv_example.elf --jit.type=LLVMJIT --etiss.loglevel=4 -i../../../SW/riscv_cpp/memsegs.ini -pLogger
        ./main.exe --vp.elf_file=../../../SW/riscv/build64/riscv_example.elf --jit.type=TCCJIT --etiss.loglevel=4 -i../../../SW/riscv/memsegs.ini -pLogger
        ./main.exe --vp.elf_file=../../../SW/riscv_cpp/build64/riscv_example.elf --jit.type=TCCJIT --etiss.loglevel=4 -i../../../SW/riscv_cpp/memsegs.ini -pLogger

  benchmark:
    strategy:
      matrix:
        run-no: [1, 2, 3, 4, 5]
        jit-engine: ["tcc", "gcc", "llvm"]

    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Fetch Compiled System
      uses: actions/download-artifact@v2
      with:
        name: etiss-Linux.tar
        path: ${{runner.workspace}}

    - name: Unpack Compiled System
      working-directory: ${{runner.workspace}}
      run: tar -xf etiss.tar

    - name: Run Benchmarks
      working-directory: ${{runner.workspace}}/install/examples/bare_etiss_processor
      run: |
        ./run_helper.sh ../SW/riscv_dhry/build/riscv_example ${{matrix.jit-engine}} --vp.stats_file_path=stats_${{matrix.jit-engine}}_${{matrix.run-no}}.json

    - name: Save Benchmark Results
      uses: actions/upload-artifact@v2
      with:
        name: stats_${{matrix.jit-engine}}_${{matrix.run-no}}.json
        path: ${{runner.workspace}}/install/examples/bare_etiss_processor/stats_${{matrix.jit-engine}}_${{matrix.run-no}}.json

  compare:
    needs: benchmark
    runs-on: ubuntu-latest

    steps:
    - name: get old benchmark results
      uses: actions/checkout@v2
      with:
        ref: benchmark_results
        path: output

    - name: Checkout wiki code
      uses: actions/checkout@v2
      with:
        repository: ${{github.repository}}.wiki
        path: wiki

    - name: Fetch results
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Prepare compare script
      run: |
        sudo apt-get install python3-mako

    - name: Prepare files
      run: |
        mkdir input
        find artifacts -type f -name '*.json' -exec mv {} input \;
        find artifacts -type f -name '*.tar' -exec mv {} . \;

    - name: Unpack etiss
      run: tar -xf etiss.tar

    - name: Run compare script
      run: python3 script/etiss/ci_bench/compare_perf.py input/stats*.json output/results.json wiki/performance.md ${{ github.sha }} $GITHUB_REPOSITORY

    - name: Deploy results to git
      if: ${{github.event_name == 'push'}}
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: output
        publish_branch: benchmark_results
        enable_jekyll: true

    - name: Update Wiki
      if: ${{github.event_name == 'push'}}
      run: |
        cd wiki
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update Performance stats"
        git push